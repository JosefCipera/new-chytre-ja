// src/App.jsx
import React, { useState, useEffect, useRef, useCallback } from "react";
import { loadWebhook } from './api/config'; // Importujeme funkci pro naƒç√≠t√°n√≠ webhooku

// --- Nov√° komponenta pro zobrazen√≠ iframe na samostatn√© str√°nce ---
function IframeView({ url, onBack }) {
  return (
    // Zmƒõna: Kontejner s max-w-7xl, centrovan√Ω a s paddingem
    <div className="flex flex-col items-center min-h-screen w-full max-w-7xl mx-auto bg-gray-100 p-4">
      {url ? (
        <>
          <iframe
            src={url}
            title="Dashboard Content"
            // Zmƒõna: iframe je w-full uvnit≈ô max-w-7xl kontejneru a m√° border-0, outline-none
            className="w-full h-[90vh] border-0 outline-none rounded-md shadow-lg"
            allowFullScreen
          ></iframe>
          <div className="mt-4">
            <button
              onClick={onBack}
              // Zmƒõna: Tlaƒç√≠tko modr√© s hex k√≥dem
              style={{ backgroundColor: '#3498DB' }}
              className="text-white py-2 px-4 rounded-md shadow-sm hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Zpƒõt
            </button>
          </div>
        </>
      ) : (
        <div className="text-center text-red-500">
          Chyba: ≈Ω√°dn√© URL k zobrazen√≠.
          <button
            onClick={onBack}
            // Zmƒõna: Tlaƒç√≠tko modr√© s hex k√≥dem
            style={{ backgroundColor: '#3498DB' }}
            className="mt-4 text-white py-2 px-4 rounded-md shadow-sm hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
          >
            Zpƒõt
          </button>
        </div>
      )}
    </div>
  );
}

// --- Komponenta pro zjednodu≈°en√© rozhran√≠ agenta (p≈ô√≠kazov√Ω vstup) ---
function AgentView({ agentName, description, onBack, onDisplayIframe }) {

  const [userInput, setUserInput] = useState("");
  const [latestAiResponse, setLatestAiResponse] = useState("");
  const [responseSeverity, setResponseSeverity] = useState('blue');
  const [loading, setLoading] = useState(false);
  const [displayMediaContent, setDisplayMediaContent] = useState(null); // M≈Ø≈æe b√Ωt { type: 'image'|'audio'|'video', src: 'url' }
  const [makeWebhookUrl, setMakeWebhookUrl] = useState(null);

  const [commandHistory, setCommandHistory] = useState([]);
  const [historyIndex, setHistoryIndex] = useState(-1);

  // --- NOV√â STAVOV√â PROMƒöNN√â PRO HLAS ---
  const [isListening, setIsListening] = useState(false);
  const recognitionRef = useRef(null); // Reference pro SpeechRecognition objekt

  // --- FUNKCE PRO ZPRACOV√ÅN√ç P≈ò√çKAZU ---
  // Nyn√≠ p≈ôij√≠m√° i makeWebhookUrl jako argument
  const processCommand = useCallback(async (commandTextFromVoice = null, webhookUrlFromVoice = null) => { // ZMƒöNA ZDE! P≈ôid√°n useCallback
    const command = commandTextFromVoice || userInput;

    if (!command.trim()) {
      setLatestAiResponse("Pros√≠m zadejte p≈ô√≠kaz.");
      setResponseSeverity('red');
      return;
    }

    // Pou≈æijeme URL p≈ôedan√© z hlasu, nebo to ze stavu makeWebhookUrl
    const urlToUse = webhookUrlFromVoice || makeWebhookUrl; // ZMƒöNA ZDE!

    if (!urlToUse) { // ZMƒöNA ZDE!
      setLatestAiResponse("Chyba: Webhook URL nen√≠ k dispozici. Zkuste to pros√≠m pozdƒõji.");
      setResponseSeverity('red');
      return;
    }

    setLoading(true);
    setLatestAiResponse("Odes√≠l√°m p≈ô√≠kaz...");
    setResponseSeverity('informative');
    setDisplayMediaContent(null); // Vyƒçist√≠ p≈ôedchoz√≠ m√©dium p≈ôi odes√≠l√°n√≠ nov√©ho p≈ô√≠kazu

    try {
      // P≈ô√≠d√°n√≠ p≈ô√≠kazu do historie, pokud nen√≠ duplik√°t posledn√≠ho
      if (commandHistory.length === 0 || commandHistory[0] !== command) {
        setCommandHistory(prev => [command, ...prev].slice(0, 10)); // Udr≈æujeme posledn√≠ch 10 p≈ô√≠kaz≈Ø
        setHistoryIndex(-1); // Resetujeme index historie po odesl√°n√≠ nov√©ho p≈ô√≠kazu
      }

      console.log(`Odes√≠l√°m p≈ô√≠kaz na Make.com: ${command} na URL: ${urlToUse}`);
      const response = await fetch(urlToUse, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ command: command }),
      });

      const responseText = await response.text(); // Z√≠sk√°me raw text odpovƒõdi

      // --- Speci√°ln√≠ o≈°et≈ôen√≠ pro odpovƒõƒè "Accepted" ---
      if (responseText === "Accepted") {
        setLatestAiResponse("P≈ô√≠kaz byl √∫spƒõ≈°nƒõ p≈ôijat slu≈æbou Make.com.");
        setResponseSeverity('green'); // Zelen√° pro √∫spƒõ≈°n√© p≈ôijet√≠
        setLoading(false);
        setUserInput("");
        return; // D≈Øle≈æit√©: Ukonƒç√≠me funkci
      }
      // --- KONEC ZMƒöN ---

      let data; // Deklarujeme promƒõnnou 'data' zde
      try {
        data = JSON.parse(responseText); // Pokus√≠me se parsovat jako JSON
      } catch (jsonError) {
        console.error("Chyba p≈ôi parsov√°n√≠ JSON odpovƒõdi:", jsonError);
        console.error("Odpovƒõƒè, kter√° zp≈Øsobila chybu:", responseText);
        setLatestAiResponse(`Chyba: ${responseText || 'Nezn√°m√° odpovƒõƒè z Make.com.'}`);
        setResponseSeverity('red');
        setLoading(false);
        setUserInput("");
        return; // D≈Øle≈æit√©: Ukonƒç√≠me funkci, pokud JSON nen√≠ validn√≠
      }


      if (!response.ok) {
        console.error("Make.com vr√°til chybov√Ω HTTP status:", response.status, responseText);
        setLatestAiResponse(`Make.com HTTP chyba: ${response.status} - ${data.message || 'Nezn√°m√° chyba'}.`);
        setResponseSeverity('red');
        return; // D≈Øle≈æit√©: Ukonƒç√≠me, pokud je HTTP chyba
      }

      console.log("DEBUG: Cel√° odpovƒõƒè z Make.com (parsovan√°):", data);
      console.log("DEBUG: Typ data.status:", typeof data.status, "Hodnota:", data.status);
      console.log("DEBUG: Typ data.response_type:", typeof data.response_type, "Hodnota:", data.response_type);
      console.log("DEBUG: Typ data.response_data:", typeof data.response_data, "Hodnota:", data.response_data);

      // --- Zpracov√°n√≠ odpovƒõdi a barvy ---
      if (data.response_type === 'notification' && data.response_data && data.response_data.message) {
        setLatestAiResponse(`${data.response_data.message}`);
        setResponseSeverity(data.response_data.severity || 'blue'); // Fallback na blue
      } else if (data.response_type === 'text') {
        setLatestAiResponse(`${data.response_data}`);
        setResponseSeverity('green');
      } else if (data.response_type === 'iframe' || data.response_type === 'url' || data.response_type === 'document_url') {
        onDisplayIframe(data.response_data);
        setLatestAiResponse("P≈ôesmƒõrov√°v√°m na obsah...");
        setResponseSeverity('blue');
      } else if (data.response_type === 'image') {
        setDisplayMediaContent({ type: 'image', src: data.response_data, alt: 'Obr√°zek z AI' });
        setLatestAiResponse("Zobrazen obr√°zek z AI.");
        setResponseSeverity('blue');
      } else if (data.response_type === 'audio') { // NOVINKA: Zpracov√°n√≠ audia
        setDisplayMediaContent({ type: 'audio', src: data.response_data, alt: 'Audio z AI' });
        setLatestAiResponse("P≈ôehr√°v√°m audio z AI.");
        setResponseSeverity('blue');
      } else if (data.response_type === 'video') { // NOVINKA: Zpracov√°n√≠ videa
        setDisplayMediaContent({ type: 'video', src: data.response_data, alt: 'Video z AI' });
        setLatestAiResponse("P≈ôehr√°v√°m video z AI.");
        setResponseSeverity('blue');
      }
      else {
        setLatestAiResponse(`Make.com: Nezn√°m√Ω typ odpovƒõdi nebo chybƒõj√≠c√≠ data. ${data.message || 'Nezn√°m√° chyba'}.`);
        setResponseSeverity('orange');
      }

    } catch (error) {
      console.error("Kritick√° chyba p≈ôi odes√≠l√°n√≠ p≈ô√≠kazu do Make.com:", error);
      setLatestAiResponse(`Kritick√° chyba komunikace: ${error.message}.`);
      setResponseSeverity('red');
    } finally {
      setLoading(false);
      setUserInput(""); // Vyƒçist√≠ vstupn√≠ pole po odesl√°n√≠
    }
  }, [userInput, makeWebhookUrl, commandHistory, onDisplayIframe]);


  useEffect(() => {
    const getWebhook = async () => {
      console.log("‚û°Ô∏è Vol√°m getWebhook v useEffect...");

      let url = null;
      try {
        console.log("üöÄ Spou≈°t√≠m loadWebhook funkci p≈ôes await...");
        url = await loadWebhook();
        console.log("‚úÖ loadWebhook vr√°til:", url);
      } catch (error) {
        console.error("‚ùå Chyba p≈ôi vol√°n√≠ loadWebhook:", error);
      }

      // I kdy≈æ se nyn√≠ zd√°, ≈æe webhook naƒç√≠t√°, toto je dobr√Ω fallback
      if (!url) {
        console.log("Fallback: Naƒç√≠t√°m webhook URL z localStorage...");
        url = localStorage.getItem('webhookUrl');
        if (url) {
          console.log("‚úÖ Webhook URL naƒçteno z localStorage:", url);
        } else {
          console.warn("‚ö†Ô∏è Webhook URL nen√≠ ani v localStorage.");
        }
      }

      if (url) {
        setMakeWebhookUrl(url);
        console.log("Webhook URL nastaveno do stavu pro AgentView:", url);
      } else {
        console.error("Nepoda≈ôilo se naƒç√≠st Webhook URL z Google Sheets nebo localStorage.");
        setLatestAiResponse("Chyba: Webhook URL nebylo naƒçteno. Zkontrolujte konfiguraci.");
        setResponseSeverity('red');
      }
    };
    getWebhook();

    // --- Inicializace SpeechRecognition API ---
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition) {
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = 'cs-CZ';

      recognitionRef.current.onstart = () => {
        setIsListening(true);
        setLatestAiResponse("Naslouch√°m...");
        setResponseSeverity('informative'); // Zmƒõna na 'informative' (bude modr√°)
      };

      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setUserInput(transcript);
        setLatestAiResponse("Rozpozn√°no: " + transcript);
        setResponseSeverity('blue'); // Rozpozn√°no je mod≈ôe

        // Pou≈æijeme callback pro setMakeWebhookUrl pro jistotu aktu√°ln√≠ hodnoty
        // a p≈ôed√°me ji processCommand
        setMakeWebhookUrl(currentUrl => {
          const urlToUse = currentUrl || localStorage.getItem('webhookUrl'); // Fallback na localStorage
          if (urlToUse) {
            processCommand(transcript, urlToUse); // Vol√°me processCommand s textem A URL
          } else {
            setLatestAiResponse("Chyba: Webhook URL nen√≠ k dispozici pro hlasov√Ω povel. Zkuste to pros√≠m pozdƒõji.");
            setResponseSeverity('red');
          }
          setIsListening(false); // Zastav√≠me naslouch√°n√≠ po zpracov√°n√≠
          return currentUrl; // Vr√°t√≠me aktu√°ln√≠ URL pro zachov√°n√≠ stavu
        });
      };

      recognitionRef.current.onerror = (event) => {
        console.error("Chyba rozpozn√°v√°n√≠ ≈ôeƒçi:", event.error);
        setIsListening(false);
        setLatestAiResponse(`Chyba hlasov√©ho vstupu: ${event.error}.`);
        setResponseSeverity('urgent');
      };

      recognitionRef.current.onend = () => {
        setIsListening(false);
      };
    } else {
      console.warn("Speech Recognition API nen√≠ podporov√°no ve va≈°em prohl√≠≈æeƒçi.");
    }

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
      }
    };

  }, [processCommand]);


  const toggleListening = () => {
    if (isListening) {
      recognitionRef.current.stop();
    } else {
      setUserInput("");
      setLatestAiResponse("");
      recognitionRef.current.start();
    }
  };

  const handleKeyDown = useCallback((e) => {
    if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (historyIndex < commandHistory.length - 1) {
        const newIndex = historyIndex + 1;
        setHistoryIndex(newIndex);
        setUserInput(commandHistory[newIndex]);
      }
    } else if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (historyIndex > 0) {
        const newIndex = historyIndex - 1;
        setHistoryIndex(newIndex);
        setUserInput(commandHistory[newIndex]);
      } else if (historyIndex === 0) {
        setHistoryIndex(-1);
        setUserInput("");
      }
    }
  }, [commandHistory, historyIndex]);

  const getSeverityClass = (severity) => {
    switch (severity) {
      case 'red':
        return 'bg-red-100 text-red-700 border border-l-4 border-red-500';
      case 'green':
        return 'bg-green-100 text-green-700 border border-l-4 border-green-500';
      case 'blue':
        return 'bg-blue-100 text-blue-700 border border-l-4 border-blue-500';
      case 'orange':
        return 'bg-orange-100 text-orange-700 border border-l-4 border-orange-500';
      case 'informative':
        return 'bg-blue-100 text-blue-700 border border-l-4 border-blue-500';
      case 'urgent':
        return 'bg-red-100 text-red-700 border border-l-4 border-red-500';
      case 'success':
        return 'bg-green-100 text-green-700 border border-l-4 border-green-500';
      case 'warning':
        return 'bg-orange-100 text-orange-700 border border-l-4 border-orange-500';
      default:
        return 'bg-gray-100 text-gray-700 border border-l-4 border-gray-500';
    }
  };

  return (
    <div className="agent-command-container bg-white rounded-lg shadow-xl p-6 max-w-7xl w-full mx-auto flex flex-col items-center">
      <h2 className="text-3xl font-bold text-center text-gray-800 mb-4 hidden sm:block">{agentName}</h2>
      <p className="text-center text-gray-600 mb-6 hidden sm:block">{description}</p>

      <div className="microphone-container mb-6 flex flex-col items-center">
        <img
          id="microphoneIcon"
          src="images/microphone-192.png"
          alt="Microphone Icon"
          className={`mic-icon w-36 h-36 mb-2 opacity-75 cursor-pointer ${isListening ? 'animate-pulse' : ''}`}
          onClick={toggleListening}
          title={isListening ? "Zastavit nahr√°v√°n√≠" : "Spustit hlasov√© zad√°v√°n√≠"}
        />
        {isListening && (
          <>
            <div className="wave wave1"></div>
            <div className="wave wave2"></div>
            <div className="wave wave3"></div>
          </>
        )}
      </div>

      {latestAiResponse && (
        <div className={`voice-status p-3 rounded-lg mb-6 ${getSeverityClass(responseSeverity)} w-fit mx-auto`}>
          {latestAiResponse}
        </div>
      )}

      {/* NOVINKA: Zobrazen√≠ media obsahu (image, audio, video) */}
      {displayMediaContent && (
        <div className="mt-4 w-full text-center mb-6">
          {displayMediaContent.type === 'image' && (
            <img src={displayMediaContent.src} alt={displayMediaContent.alt} className="max-w-full h-auto mx-auto" />
          )}
          {displayMediaContent.type === 'audio' && (
            <audio controls src={displayMediaContent.src} className="w-full max-w-md mx-auto" onError={(e) => console.error("Audio loading error:", e.target.error, displayMediaContent.src)}></audio>
          )}
          {displayMediaContent.type === 'video' && (
            <video controls src={displayMediaContent.src} className="w-full max-w-md mx-auto" style={{ maxHeight: '400px' }} onError={(e) => console.error("Video loading error:", e.target.error, displayMediaContent.src)}></video>
          )}
        </div>
      )}

      <div className="w-full sm:w-2/3 md:w-1/2 lg:w-1/3 mb-4 max-w-md">
        <input
          type="text"
          id="userInput"
          className="w-full border border-gray-300 rounded-md p-3 text-lg focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Napi≈°te p≈ô√≠kaz, nap≈ô. Kontrola dat."
          value={userInput}
          onChange={(e) => setUserInput(e.target.value)}
          onKeyPress={(e) => { if (e.key === 'Enter') processCommand(); }}
          onKeyDown={handleKeyDown}
          disabled={isListening}
        />
      </div>

      <div className="flex justify-center space-x-4 mt-4 w-full">
        <button
          onClick={() => processCommand()}
          disabled={loading || !makeWebhookUrl || isListening}
          style={{ backgroundColor: '#3498DB' }}
          className="text-white py-2 px-4 rounded-md shadow-sm hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          {loading ? "Odes√≠l√°m..." : "Odeslat"}
        </button>
        <button
          onClick={onBack}
          style={{ backgroundColor: '#3498DB' }}
          className="text-white py-2 px-4 rounded-md shadow-sm hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          Zpƒõt na Marketplace
        </button>
      </div>
    </div>
  );
}

// --- Komponenta pro Marketing Agenta (s p≈Øvodn√≠m obsahem z va≈°eho souboru) ---
function MarketingAgentSpecificView({ onBack }) {
  const [postText, setPostText] = useState("");
  const [generatedPost, setGeneratedPost] = useState("");
  const [loading, setLoading] = useState(false);
  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  const [email, setEmail] = useState("");
  const [company, setCompany] = useState("");
  const [industry, setIndustry] = useState("");
  const [numEmployees, setNumEmployees] = useState("");
  const [position, setPosition] = useState("");
  const [notes, setNotes] = useState("");
  const [linkedinText, setLinkedinText] = useState("");
  const [aiPrompt, setAiPrompt] = useState("");
  const [aiResponse, setAiResponse] = useState("");
  const [message, setMessage] = useState(null);
  const [error, setError] = useState(null);

  const extractDataFromLinkedin = () => {
    const extractedFirstName = linkedinText.split(',')[0]?.split(' ')[0] || '';
    const extractedLastName = linkedinText.split(',')[0]?.split(' ')[1] || '';
    const extractedPosition = linkedinText.includes('Pozice:') ? linkedinText.split('Pozice:')[1].split(',')[0].trim() : '';
    const extractedCompany = linkedinText.includes('spoleƒçnosti') ? linkedinText.split('spoleƒçnosti')[1].split('.')[0].trim() : '';

    setFirstName(extractedFirstName);
    setLastName(extractedLastName);
    setPosition(extractedPosition);
    setCompany(extractedCompany);
    setMessage("Data extrahov√°na (zjednodu≈°enƒõ).");
  };

  const handleSubmitContact = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage(null);
    setError(null);

    console.log("Odes√≠l√°m kontakt do Make.com/HubSpot:", { firstName, lastName, email, company, industry, numEmployees, position, notes });

    setTimeout(() => {
      setMessage("Kontakt byl √∫spƒõ≈°nƒõ ulo≈æen (simulace)!");
      setLoading(false);
    }, 1500);
  };

  const handleGenerateAiContent = async () => {
    setLoading(true);
    setAiResponse("");
    setError(null);
    setMessage(null);

    console.log("Generuji AI obsah pro dotaz:", aiPrompt);

    try {
      const simulatedAiResult = `Na z√°kladƒõ va≈°eho po≈æadavku a informac√≠ o kontaktu (jm√©no: ${firstName}, firma: ${company}), zde jsou marketingov√© n√°pady: ${aiPrompt}`;

      setAiResponse(simulatedAiResult);
      setMessage("Obsah AI √∫spƒõ≈°nƒõ vygenerov√°n (simulace).");
    } catch (err) {
      setError("Chyba p≈ôi generov√°n√≠ AI obsahu.");
      console.error("AI Generation Error:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="marketing-agent-form-container bg-white rounded-lg shadow-xl p-6 max-w-2xl w-full mx-auto">
      <h2 className="text-3xl font-bold text-center text-gray-800 mb-4">AI Asistent Marketing</h2>
      <p className="text-center text-gray-600 mb-6">Pro spr√°vu kontakt≈Ø a generov√°n√≠ marketingov√Ωch text≈Ø.</p>

      {message && <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">{message}</div>}
      {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4">{error}</div>}

      <form onSubmit={handleSubmitContact} className="space-y-4">
        <div>
          <label htmlFor="linkedinText" className="block text-sm font-medium text-gray-700">Vlo≈æte text z LinkedIn profilu (pro automatick√© p≈ôedvyplnƒõn√≠):</label>
          <textarea
            id="linkedinText"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            rows="3"
            placeholder="Nap≈ô.: Jaroslav Havel, spojen√≠ 2. stupnƒõ, Vedouc√≠ provozu P≈ôedmont√°≈æ ve spoleƒçnosti ≈†KODA TRANSPORTATION a.s."
            value={linkedinText}
            onChange={(e) => setLinkedinText(e.target.value)}
          ></textarea>
          <button type="button" onClick={extractDataFromLinkedin} className="mt-2 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            Extrahovat data
          </button>
        </div>

        <h3 className="text-xl font-semibold text-gray-800 pt-4 border-t">Z√°kladn√≠ informace o kontaktu</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 required">Jm√©no:</label>
            <input type="text" id="firstName" name="firstName" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value={firstName} onChange={(e) => setFirstName(e.target.value)} />
          </div>
          <div>
            <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 required">P≈ô√≠jmen√≠:</label>
            <input type="text" id="lastName" name="lastName" required className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value={lastName} onChange={(e) => setLastName(e.target.value)} />
          </div>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email:</label>
            <input type="email" id="email" name="email" className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value={email} onChange={(e) => setEmail(e.target.value)} />
          </div>
          <div>
            <label htmlFor="company" className="block text-sm font-medium text-gray-700">Firma:</label>
            <input type="text" id="company" name="company" className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value={company} onChange={(e) => setCompany(e.target.value)} />
          </div>
          <div>
            <label htmlFor="industry" className="block text-sm font-medium text-gray-700">Pr≈Ømysl:</label>
            <input type="text" id="industry" name="industry" className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value={industry} onChange={(e) => setIndustry(e.target.value)} />
          </div>
          <div>
            <label htmlFor="numEmployees" className="block text-sm font-medium text-gray-700">Poƒçet zamƒõstnanc≈Ø:</label>
            <input type="number" id="numEmployees" name="numEmployees" min="0" className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value={numEmployees} onChange={(e) => setNumEmployees(e.target.value)} />
          </div>
          <div>
            <label htmlFor="position" className="block text-sm font-medium text-gray-700">Pozice:</label>
            <input type="text" id="position" name="position" className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value={position} onChange={(e) => setPosition(e.target.value)} />
          </div>
          <div>
            <label htmlFor="notes" className="block text-sm font-medium text-gray-700">Dopl≈àuj√≠c√≠ informace / Pozn√°mky AI asistenta:</label>
            <textarea id="notes" name="notes" rows="3" className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" value={notes} onChange={(e) => setNotes(e.target.value)}></textarea>
          </div>
        </div>
        <div className="flex justify-end space-x-3">
          <button type="submit" disabled={loading} className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            {loading ? "Ukl√°d√°m..." : "Ulo≈æit kontakt (do HubSpot p≈ôes Make)"}
          </button>
          <button type="reset" onClick={() => { /* clear all states */ }} disabled={loading} className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Vyƒçistit formul√°≈ô
          </button>
        </div>
      </form>

      <h3 className="text-xl font-semibold text-gray-800 pt-6 border-t mt-6">Interakce s AI Asistentem Marketing</h3>
      <div className="space-y-4">
        <div>
          <label htmlFor="aiPrompt" className="block text-sm font-medium text-gray-700">Tv≈Øj po≈æadavek pro AI:</label>
          <textarea
            id="aiPrompt"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            rows="3"
            placeholder="Nap≈ô.: Navrhni mi 3 n√°pady na √∫vodn√≠ e-mail pro tento kontakt, zamƒõ≈ô se na ≈ôe≈°en√≠ probl√©m≈Ø v [Pr≈Ømysl]."
            value={aiPrompt}
            onChange={(e) => setAiPrompt(e.target.value)}
          ></textarea>
        </div>
        <button
          type="button"
          onClick={handleGenerateAiContent}
          disabled={loading}
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          {loading ? "Generuji..." : "Generovat obsah AI"}
        </button>
        {aiResponse && (
          <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-md">
            <h4 className="text-lg font-semibold text-blue-800">Odpovƒõƒè od AI:</h4>
            <p className="mt-2 text-blue-700 whitespace-pre-wrap">{aiResponse}</p>
          </div>
        )}
      </div>
      <div className="text-center mt-4">
        <button
          onClick={onBack}
          className="bg-gray-500 text-white py-2 px-4 rounded-md shadow-sm hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
        >
          Zpƒõt na Marketplace
        </button>
      </div>
    </div>
  );
}


// Komponenta pro Marketplace
function MarketplaceView({ onLaunchAgent }) {
  const agents = [
    { name: "AI agent Finance", description: "Specialista na finanƒçn√≠ ≈ô√≠zen√≠ a podporu rozhodov√°n√≠.", image: "images/finance-192.png", type: "finance", url: "finance.html" },
    { name: "AI agent V√Ωroba", description: "Expert na pl√°nov√°n√≠ v√Ωroby a simulaci vyt√≠≈æen√≠ kapacit.", image: "images/vyroba-192.png", type: "vyroba", url: "index.html" },
    { name: "AI agent Marketing", description: "Expert na hodnotovou nab√≠dku a segmentaci z√°kazn√≠k≈Ø.", image: "images/marketing-192.png", type: "marketing", url: "marketing.html" },
    { name: "AI agent Strat√©g", description: "Specialista na inovativn√≠ byznys modely a strategie.", image: "images/strateg-192.png", type: "strateg", url: "strateg.html" },
  ];

  return (
    <div className="marketplace-container min-h-screen w-full bg-[#f0f0f0] flex flex-col items-center">
      <header className="w-full bg-[#2c3e50] text-white p-8 text-center shadow-md">
        <h1 className="text-3xl sm:text-4xl font-bold text-white">Smart Agent Platform</h1>
        <h2 className="text-lg sm:text-xl mt-2 text-white">Centrum specializovan√Ωch agent≈Ø</h2>
      </header>

      <section className="w-full max-w-4xl bg-[#e6f0fa] rounded-lg mx-auto mt-12 p-8 text-center shadow-md">
        <p className="text-lg text-[#666]">Vyberte agenty, kter√© pot≈ôebujete. Jedna aplikace - nekoneƒçn√© mo≈ænosti.</p>
      </section>

      <main className="w-full max-w-7xl p-6 mt-8 flex-grow">
        <div className="marketplace-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 justify-items-center">
          {agents.map((agent) => (
            <div key={agent.type} className="marketplace-item bg-[#e6f0fa] rounded-lg shadow-md p-8 text-center transition-transform duration-200 hover:scale-105 flex flex-col items-center justify-between w-full max-w-sm">
              <img
                src={agent.image}
                alt={agent.name}
                className="w-48 h-48 object-contain mb-4 cursor-pointer shadow-md"
                onClick={() => onLaunchAgent(agent.type)}
              />
              <h3 className="text-xl font-semibold text-[#2c3e50] mb-2">{agent.name}</h3>
              <p className="text-center text-[#666] text-sm mb-2">
                {agent.description}
              </p>
              <button
                onClick={() => onLaunchAgent(agent.type)}
                className="bg-[#3498db] text-white py-2 px-4 rounded-md cursor-pointer transition-colors duration-200 hover:bg-[#2980b9] w-full"
              >
                Spus≈• agenta
              </button>
            </div>
          ))}
        </div>
      </main>

      <footer className="w-full bg-[#2c3e50] text-white text-center p-4">
        <p>¬© 2025 Smart Agent Platform. V≈°echna pr√°va vyhrazena.</p>
      </footer>
    </div>
  );
}


// Hlavn√≠ komponenta aplikace
function App() {
  const [currentView, setCurrentView] = useState('marketplace');
  const [iframeUrl, setIframeUrl] = useState(null);
  const [previousAgentView, setPreviousAgentView] = useState(null);

  const launchAgent = (agentType) => {
    setPreviousAgentView(agentType);
    setCurrentView(agentType);
  };

  const handleDisplayIframe = (url) => {
    setIframeUrl(url);
    setCurrentView('iframe_view');
  };

  const renderView = () => {
    switch (currentView) {
      case 'marketplace':
        return <MarketplaceView onLaunchAgent={launchAgent} />;
      case 'marketing':
        return <MarketingAgentSpecificView onBack={() => setCurrentView('marketplace')} />;
      case 'finance':
      case 'vyroba':
      case 'strateg':
        const agentInfo = {
          finance: { name: "AI agent Finance", description: "Specialista na finanƒçn√≠ ≈ô√≠zen√≠ a podporu rozhodov√°n√≠." },
          vyroba: { name: "AI agent V√Ωroba", description: "Expert na pl√°nov√°n√≠ v√Ωroby a simulaci vyt√≠≈æen√≠ kapacit." },
          strateg: { name: "AI agent Strat√©g", description: "Specialista na inovativn√≠ byznys modely a strategie." },
        };
        const { name, description } = agentInfo[currentView];
        return <AgentView agentName={name} description={description} onBack={() => setCurrentView('marketplace')} onDisplayIframe={handleDisplayIframe} />;
      case 'iframe_view':
        return (
          <IframeView
            url={iframeUrl}
            onBack={() => setCurrentView(previousAgentView || 'marketplace')}
          />
        );
      default:
        return <MarketplaceView onLaunchAgent={launchAgent} />; // Fallback
    }
  };

  return (
    <div className="min-h-screen w-full bg-gray-100 text-gray-900 flex flex-col items-center">
      {renderView()}
    </div>
  );
}

export default App;